---
- name: Install k3s-bin
  when: ansible_facts['os_family'] == "Archlinux"
  command: yay -S k3s-bin --noconfirm
  args:
    warn: no

- name: Install k3s
  when: ansible_facts['os_family'] == "Debian"
  shell: "curl -sfL https://get.k3s.io | INSTALL_K3S_SKIP_ENABLE=true INSTALL_K3S_BIN_DIR='/usr/bin/' sh -"
  become: yes
  args:
    warn: no

- name: disable ufw
  become: yes
  ignore_errors: true
  ansible.builtin.systemd:
    name: ufw
    enabled: no
    daemon_reload: yes
    state: stopped

- name: disable ufw
  ignore_errors: true
  become: yes
  ufw:
    state: disabled
    policy: allow

- name: remove ufw
  ignore_errors: true
  when: ansible_facts['os_family'] == "Archlinux"
  become: yes
  community.general.pacman:
    name: ufw
    state: absent

- name: Set hostname to "{{ inventory_hostname }}"
  become: yes
  command: hostnamectl set-hostname {{ inventory_hostname }}

- name: Get the k3s token
  ignore_errors: true
  become: yes
  ansible.builtin.slurp:
    src: /var/lib/rancher/k3s/server/node-token
  register: k3s_token
  delegate_to: "{{ groups._k3s_server[0] }}"

- name: Set k3s server url
  set_fact:
    k3s_server_url: 'https://{{ hostvars[groups._k3s_server[0]].tags.wireguard_ip.split("/")[0] }}:6443'

- name: Create a directory if it does not exist
  become: yes
  ansible.builtin.file:
    path: /etc/systemd/system/k3s.service.d
    state: directory
    owner: root
    group: root
    mode: '0644'

- name: edit k3s systemd service for initial server
  become: yes
  when: "'_k3s_server' in group_names and k3s_token['content'] is not defined"
  copy:
    mode: 0644
    owner: root
    group: root
    force: yes
    dest: /etc/systemd/system/k3s.service.d/network.conf
    content: |
      [Unit]
      After=wg-quick@wg0.service
      After=iptables.service

      [Service]
      ExecStart=
      ExecStart=/usr/bin/k3s server --cluster-init --flannel-iface=wg0 --snapshotter=native --advertise-address {{ hostvars[inventory_hostname]['tags']['wireguard_ip'].split("/")[0] }} --node-taint node-role.kubernetes.io/master=true:NoSchedule --disable local-storage

- name: edit k3s systemd service for server
  become: yes
  when: "'_k3s_server' in group_names and k3s_token['content'] is defined"
  copy:
    mode: 0644
    owner: root
    group: root
    force: yes
    dest: /etc/systemd/system/k3s.service.d/network.conf
    content: |
      [Unit]
      After=wg-quick@wg0.service
      After=iptables.service

      [Service]
      ExecStart=
      ExecStart=/usr/bin/k3s server {% if hostvars[groups._k3s_server[0]].tags.wireguard_ip.split("/")[0] != hostvars[inventory_hostname]['tags']['wireguard_ip'].split("/")[0] %}--server {{ k3s_server_url }}{% else %}--cluster-init{% endif %} --snapshotter=native --token {{ k3s_token['content'] | b64decode | trim }} --advertise-address {{ hostvars[inventory_hostname]['tags']['wireguard_ip'].split("/")[0] }} --flannel-iface=wg0 --node-taint node-role.kubernetes.io/master=true:NoSchedule --disable local-storage

- name: edit k3s systemd service for agent
  become: yes
  when: "'_k3s_agent' in group_names"
  copy:
    mode: 0644
    owner: root
    group: root
    force: yes
    dest: /etc/systemd/system/k3s.service.d/network.conf
    content: |
      [Unit]
      After=wg-quick@wg0.service
      After=iptables.service

      [Service]
      ExecStart=
      ExecStart=/usr/bin/k3s agent --snapshotter=native --server {{ k3s_server_url }} --token {{ k3s_token['content'] | b64decode | trim }} --flannel-iface=wg0

- name: enable journald volatile storage to reduce k3s load on the disk
  become: yes
  ansible.builtin.lineinfile:
    path: /etc/systemd/journald.conf
    insertafter: '^[Journal]'
    regexp: '^Storage='
    line: Storage=volatile

- name: enable journald volatile storage to reduce k3s load on the disk
  become: yes
  ansible.builtin.lineinfile:
    path: /etc/systemd/journald.conf
    regexp: '^#Storage'
    state: absent

- name: Reload systemd-journal
  become: yes
  ansible.builtin.systemd:
    name: systemd-journald
    daemon_reload: yes
    state: restarted

- name: Reload service k3s
  become: yes
  ansible.builtin.systemd:
    name: k3s
    enabled: yes
    daemon_reload: yes
    state: restarted

- name: install open-iscsi
  when: ansible_facts['os_family'] == "Archlinux"
  become: yes
  community.general.pacman:
    update_cache: yes
    name: open-iscsi
    state: present

- name: Ensure iscsid is started
  become: yes
  ansible.builtin.systemd:
    name: iscsid
    enabled: yes
    state: started

- name: Allow SSH on iptables
  ansible.builtin.iptables:
    in_interface: eth0
    protocol: tcp
    limit: 3/s
    destination_port: 22
    jump: ACCEPT
    chain: INPUT
  become: yes

- name: Allow Wireguard on iptables
  ansible.builtin.iptables:
    in_interface: eth0
    destination_port: 51820
    protocol: udp
    jump: ACCEPT
    chain: INPUT
  become: yes

- name: Allow in 6443 on wg0
  ansible.builtin.iptables:
    in_interface: wg0
    destination_port: 6443
    protocol: tcp
    jump: ACCEPT
    chain: INPUT
  become: yes

- name: Allow related and established connections for incoming connections on eth0
  ansible.builtin.iptables:
    in_interface: eth0
    chain: INPUT
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
  become: yes

- name: Allow all outgoing connections
  ansible.builtin.iptables:
    chain: OUTPUT
    jump: ACCEPT
  become: yes

- name: Allow cni0 input
  ansible.builtin.iptables:
    in_interface: cni0
    chain: INPUT
    source: 10.42.0.0/16
    jump: ACCEPT
  become: yes

- name: Allow cni0 forward
  ansible.builtin.iptables:
    in_interface: cni0
    chain: FORWARD
    source: 10.42.0.0/15
    jump: ACCEPT
  become: yes

- name: Allow wg0 input
  ansible.builtin.iptables:
    in_interface: cni0
    chain: INPUT
    source: 0.0.0.0/0
    jump: ACCEPT
  become: yes

- name: Allow wg0 forward
  ansible.builtin.iptables:
    in_interface: wg0
    chain: FORWARD
    source: 0.0.0.0/0
    jump: ACCEPT
  become: yes

- name: Deny all tcp on eth0 on iptables
  ansible.builtin.iptables:
    in_interface: eth0
    protocol: tcp
    jump: DROP
    chain: INPUT
  become: yes

- name: Deny all udp on eth0 on iptables
  ansible.builtin.iptables:
    in_interface: eth0
    protocol: udp
    jump: DROP
    chain: INPUT
  become: yes

- name: Save current state of iptables in system file
  become: yes
  community.general.iptables_state:
    state: saved
    path: /etc/iptables/iptables.rules

- name: Start and enable iptables
  when: ansible_facts['os_family'] == "Archlinux"
  become: yes
  ansible.builtin.systemd:
    name: iptables
    enabled: yes
    daemon_reload: yes
    state: restarted